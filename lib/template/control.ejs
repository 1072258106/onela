/**
 * {{tableFullName}}后台管理API
 * auth：{{author}}
 * create time：{{create_time}}
 */
var express = require('express');
var router = express.Router();
//数据模块引用
var h_{{tableFullName}} = require("../{{directory}}/{{prefix}}/{{tableFullName}}.js");
//返回码
var h_resultCode = require('../common/resultCode');

/**
 * 根据id获取记录详情
 * request:POST
 * @param
 * {
 *      "id":"",      //主键id
 * }
 * author:{{author}}
 * create time:{{create_time}}
 * test url：{{protocol}}://{{host}}{{output_path}}get{{tableName}}Detail
 */
router.post('/get{{tableName}}Detail', function (req, res) {
    //参数
    var paras = req.body;

    //数据分页查询
    h_{{tableFullName}}.getEntityById(paras.id, false)
        .then(function (data) {
            /**
             * 直接返回数据集
             */
            res.status(200).json(h_resultCode.success(data, "{{tableName}}数据模块", "查询数据记录成功"));
        })
        .catch(function (ex) {
            console.log("数据分页查询请求出现异常>>", ex);
            res.status(200).json(h_resultCode.returnResult("1", "查询数据记录出错", "{{tableName}}数据模块", ex));
        });
});

/**
 * 获取分页数据列表
 * request:POST
 * @param
 * {
 *      "start":0,      //开始数据索引，参数可缺省，默认为0
 *      "length":10,    //获取数据行数，参数可缺省，默认为10
 *      ...             //queryTable的参数模型（详见jquery插件）
 * }
 * author:{{author}}
 * create time:{{create_time}}
 * test url：{{protocol}}://{{host}}{{output_path}}get{{tableName}}List
 */
router.post('/get{{tableName}}List', function (req, res) {
    //参数
    var paras = req.body;
    //查询未审核商户列表信息
    var condition = {
        "keyword": [
            {"key": "valid", "value": 1, "logic": "and", operator: "="}
        ],
        "orderBy": {"created_time": "DESC"},
        "limit": [0, 10]
    };
    //分页参数指定
    if (paras.hasOwnProperty('start')) {
        //前端指定数据页开始位置
        condition.limit[0] = parseInt(paras.start);
    }
    if (paras.hasOwnProperty('length')) {
        //前端指定分页大小
        condition.limit[1] = parseInt(paras.length);
    }
    //排序，支持组合排序
    if (paras.hasOwnProperty('order') && paras.order.length > 0) {
        //清空默认排序条件
        condition.orderBy = {};
        //可能是组合排序
        for (var i in paras.order) {
            condition.orderBy[paras.columns[paras.order[i].column].data] = paras.order[i].dir;
        }
    }
    //查询条件
    if (paras.hasOwnProperty('keyword')) {
        /**
         * 查询条件遍历
         * 这里全是等于条件，如果是其他查询条件需要自行组织
         */
        for (var i in paras.keyword) {
            if (paras.keyword[i] != '')
                condition.keyword.push({"logic": "and", "key": i, operator: "=", "value": paras.keyword[i]})
        }
    }
    //数据分页查询
    h_{{tableFullName}}.getEntityList(condition, false)
        .then(function (data) {
            /**
             * 直接返回数据集
             */
            res.status(200).json(data);
            console.log(data);
        })
        .catch(function (ex) {
            console.log("数据分页查询请求出现异常>>", ex);
            res.status(200).json(h_resultCode.returnResult("1", "查询数据记录出错", "{{tableName}}数据模块", ex));
        });
});

/**
 * 修改/新增实体对象信息
 * request:POST
 * @param：
 * {
 *      "id":"" ,        //主键id
 *      ...              //其他参数
 * }
 * author:{{author}}
 * create time:{{create_time}}
 * test url：{{protocol}}://{{host}}{{output_path}}update{{tableName}}
 */
router.post('/update{{tableName}}', function (req, res) {
    //参数
    var paras = req.body;
    console.log("传入参数>>", paras);
    //参数验证
    if (!paras.hasOwnProperty('id')) {
        res.status(200).json({code: 101, msg: '参数不正确，缺少id参数'});
        return;
    }
    /**
     * 根据id判断是新增还是修改，如果主键名称不是id，需要调整
     */
    if (!paras.id || paras.id == '') {
        //新增
        var entity = JSON.parse(JSON.stringify(paras));
        //可能存在的一些参数需要设定默认值
        entity.id = null;              //为null的时候，新增
        entity.remark = "";
        entity.created_id = "";
        entity.update_id = "";
        /**
         * 新增
         */
         h_{{tableFullName}}.insertEntity(entity, false)
            .then(function (result) {
                res.status(200).json(h_resultCode.success(result, "{{tableName}}模块", "请求成功"));
            })
            .catch(function (ex) {
                res.status(200).json(h_resultCode.returnResult("1", "请求出错", "{{tableName}}模块", ex));
            });
    }
    else {
        /**
         * 更新：其他参数为动态参数
         */
        var p = {
            "update": [],
            "keyword": []
        }
        for (var i in paras) {
            if (i == 'id') {
                //判断条件
                p.keyword.push({"logic": "and", "key": i, "operator": "=", "value": paras[i]});
            }
            else {
                //更新字段
                p.update.push({"key": i, "operator": "=", "value": paras[i], "operator": "replace"});
            }
        }
        /**
         * 更新账户信息
         */
         h_{{tableFullName}}.updateBySenior(p, false)
            .then(function (result) {
                res.status(200).json(h_resultCode.success(result, "{{tableName}}数据模块", "对象修改成功"));
            })
            .catch(function (ex) {
                res.status(200).json(h_resultCode.returnResult("1", "错误捕捉", "{{tableName}}数据模块", ex));
            });
    }
});

/**
 * 删除实体对象数据
 * request:POST
 * @param：
 * {
 *      "id":"" ,        //主键id
 * }
 * author:{{author}}
 * create time:{{create_time}}
 * test url：{{protocol}}://{{host}}{{output_path}}delete{{tableName}}
 */
router.post('/delete{{tableName}}', function (req, res) {
//获取参数
    var paras = req.body;
    //参数验证
    if (!paras.hasOwnProperty('id')) {
        res.status(200).json(h_resultCode.returnResult("1", "参数错误", "{{tableName}}数据模块", "请检查id参数"));
        return;
    }

    /**
     * 更新操作（非物理删除）
     */
    var p = {
        "update": [
            //已经销售总金额，值替换更新
            {"key": "valid", "value": 0, "operator": "replace"}
        ],
        "keyword": [{"logic": "and", "key": "id", "operator": "=", "value": paras.id}]
    }
    /**
     * 执行更新
     */
     h_{{tableFullName}}.updateBySenior(p, false)
        .then(function (data) {
            res.status(200).json(h_resultCode.success(data, "{{tableName}}数据模块", "对象删除成功"));
        })
        .catch(function (ex) {
            res.status(200).json(h_resultCode.returnResult("1", "错误捕捉", "{{tableName}}数据模块", ex));
        });
});

module.exports = router;